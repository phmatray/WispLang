// This file has been generated by GenerateAst.

namespace WispScanner;

public abstract record Stmt
{
    public interface IVisitorVoid
    {
        void VisitBlockStmt(Block stmt);
        void VisitExprStmtStmt(ExprStmt stmt);
        void VisitFunctionStmt(Function stmt);
        void VisitIfStmt(If stmt);
        void VisitPrintStmt(Print stmt);
        void VisitReturnStmt(Return stmt);
        void VisitVarStmt(Var stmt);
        void VisitWhileStmt(While stmt);
    }

    public record Block(List<Stmt> Statements) : Stmt
    {
        public override void Accept(IVisitorVoid visitor)
        {
            visitor.VisitBlockStmt(this);
        }
    }

    public record ExprStmt(Expr Expression) : Stmt
    {
        public override void Accept(IVisitorVoid visitor)
        {
            visitor.VisitExprStmtStmt(this);
        }
    }

    public record Function(Token Name, List<Token> Parameters, List<Stmt> Body) : Stmt
    {
        public override void Accept(IVisitorVoid visitor)
        {
            visitor.VisitFunctionStmt(this);
        }
    }

    public record If(Expr Condition, Stmt ThenBranch, Stmt? ElseBranch) : Stmt
    {
        public override void Accept(IVisitorVoid visitor)
        {
            visitor.VisitIfStmt(this);
        }
    }

    public record Print(Expr Expression) : Stmt
    {
        public override void Accept(IVisitorVoid visitor)
        {
            visitor.VisitPrintStmt(this);
        }
    }

    public record Return(Token Keyword, Expr? Value) : Stmt
    {
        public override void Accept(IVisitorVoid visitor)
        {
            visitor.VisitReturnStmt(this);
        }
    }

    public record Var(Token Name, Expr? Initializer) : Stmt
    {
        public override void Accept(IVisitorVoid visitor)
        {
            visitor.VisitVarStmt(this);
        }
    }

    public record While(Expr Condition, Stmt Body) : Stmt
    {
        public override void Accept(IVisitorVoid visitor)
        {
            visitor.VisitWhileStmt(this);
        }
    }

    public abstract void Accept(IVisitorVoid visitor);
}
