using System.Text;

namespace GenerateAst;

internal static class Program
{
    public static void Main(string[] args)
    {
        Console.WriteLine("GenerateAst");

        if (args.Length != 1)
        {
            Console.Error.WriteLine("Usage: GenerateAst <output directory>");
            Environment.Exit(64);
        }

        string outputDir = args[0];
        DefineAst(outputDir, "Expr", [
            "Assign   : Token Name, Expr Value",
            "Binary   : Expr Left, Token Op, Expr Right",
            "Call     : Expr Callee, Token Paren, List<Expr> Arguments",
            "Grouping : Expr Expression",
            "Literal  : object? Value",
            "Logical  : Expr Left, Token Op, Expr Right",
            "Unary    : Token Op, Expr Right",
            "Variable : Token Name"
        ]);
        
        DefineAst(outputDir, "Stmt", [
            "Block    : List<Stmt> Statements",
            "ExprStmt : Expr Expression",
            "Function : Token Name, List<Token> Parameters, List<Stmt> Body",
            "If       : Expr Condition, Stmt ThenBranch, Stmt? ElseBranch",
            "Print    : Expr Expression",
            "Return   : Token Keyword, Expr? Value",
            "Var      : Token Name, Expr? Initializer",
            "While    : Expr Condition, Stmt Body"
        ]);
    }

    private static void DefineAst(string outputDir, string baseName, List<string> types)
    {
        string path = $"{outputDir}/{baseName}.cs";
        using StreamWriter writer = new(path, false, Encoding.UTF8);
        
        writer.WriteLine("// This file has been generated by GenerateAst.");
        writer.WriteLine();
        
        writer.WriteLine("namespace WispScanner;");
        writer.WriteLine();
        writer.WriteLine("public abstract record " + baseName);
        writer.WriteLine("{");
        
        DefineVisitor(writer, baseName, types);
        
        // The AST classes.
        foreach (string type in types)
        {
            string className = type.Split(":")[0].Trim();
            string fields = type.Split(":")[1].Trim();
            DefineType(writer, baseName, className, fields);
        }
        
        // The base accept() method.
        string acceptSignature = baseName switch
        {
            "Expr" => "T Accept<T>(IVisitor<T> visitor)",
            "Stmt" => "void Accept(IVisitorVoid visitor)",
            _ => throw new ArgumentOutOfRangeException(nameof(baseName), baseName, null)
        };
        
        writer.WriteLine($"    public abstract {acceptSignature};");
        
        writer.WriteLine("}");
        writer.Close();
    }
    
    private static void DefineVisitor(StreamWriter writer, string baseName, List<string> types)
    {
        switch (baseName)
        {
            case "Expr":
            {
                writer.WriteLine("    public interface IVisitor<out T>");
                writer.WriteLine("    {");
        
                foreach (string type in types)
                {
                    string typeName = type.Split(":")[0].Trim();
                    writer.WriteLine($"        T Visit{typeName}{baseName}({typeName} {baseName.ToLower()});");
                }
        
                writer.WriteLine("    }");
                break;
            }
            case "Stmt":
            {
                writer.WriteLine("    public interface IVisitorVoid");
                writer.WriteLine("    {");
        
                foreach (string type in types)
                {
                    string typeName = type.Split(":")[0].Trim();
                    writer.WriteLine($"        void Visit{typeName}{baseName}({typeName} {baseName.ToLower()});");
                }
        
                writer.WriteLine("    }");
                break;
            }
        }
        
        writer.WriteLine();
    }
    
    private static void DefineType(StreamWriter writer, string baseName, string className, string fieldList)
    {
        writer.WriteLine($"    public sealed record {className}({fieldList}) : {baseName}");
        writer.WriteLine("    {");
        
        // Visitor pattern.
        switch (baseName)
        {
            case "Expr":
            {
                writer.WriteLine("        public override T Accept<T>(IVisitor<T> visitor)");
                writer.WriteLine("        {");
                writer.WriteLine($"            return visitor.Visit{className}{baseName}(this);");
                writer.WriteLine("        }");
                break;
            }
            case "Stmt":
            {
                writer.WriteLine("        public override void Accept(IVisitorVoid visitor)");
                writer.WriteLine("        {");
                writer.WriteLine($"            visitor.Visit{className}{baseName}(this);");
                writer.WriteLine("        }");
                break;
            }
        }
        
        writer.WriteLine("    }");
        writer.WriteLine();
    }
}