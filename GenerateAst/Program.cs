using System.Text;

internal class Program
{
    public static void Main(string[] args)
    {
        Console.WriteLine("GenerateAst");

        if (args.Length != 1)
        {
            Console.Error.WriteLine("Usage: GenerateAst <output directory>");
            Environment.Exit(64);
        }

        string outputDir = args[0];
        DefineAst(outputDir, "Expr", [
            "Binary   : Expr left, Token op, Expr right",
            "Grouping : Expr expression",
            "Literal  : object? value",
            "Unary    : Token op, Expr right"
        ]);
    }

    private static void DefineAst(string outputDir, string baseName, List<string> types)
    {
        string path = $"{outputDir}/{baseName}.cs";
        using StreamWriter writer = new(path, false, Encoding.UTF8);
        
        writer.WriteLine("// This file has been generated by GenerateAst.");
        writer.WriteLine();
        
        writer.WriteLine("namespace WispScanner;");
        writer.WriteLine();
        writer.WriteLine("public abstract class " + baseName);
        writer.WriteLine("{");
        
        DefineVisitor(writer, baseName, types);
        
        // The AST classes.
        foreach (string type in types)
        {
            string className = type.Split(":")[0].Trim();
            string fields = type.Split(":")[1].Trim();
            DefineType(writer, baseName, className, fields);
        }
        
        // The base accept() method.
        writer.WriteLine();
        writer.WriteLine("    public abstract T Accept<T>(IVisitor<T> visitor);");
        
        writer.WriteLine("}");
        writer.Close();
    }
    
    private static void DefineVisitor(StreamWriter writer, string baseName, List<string> types)
    {
        writer.WriteLine("    public interface IVisitor<T>");
        writer.WriteLine("    {");
        
        foreach (string type in types)
        {
            string typeName = type.Split(":")[0].Trim();
            writer.WriteLine($"        T Visit{typeName}{baseName}({typeName} {baseName.ToLower()});");
        }
        
        writer.WriteLine("    }");
        writer.WriteLine();
    }
    
    private static void DefineType(StreamWriter writer, string baseName, string className, string fieldList)
    {
        writer.WriteLine($"    public class {className} : {baseName}");
        writer.WriteLine("    {");
        
        // Constructor.
        writer.WriteLine($"        public {className}({fieldList})");
        writer.WriteLine("        {");
        
        // Store parameters in fields.
        string[] fields = fieldList.Split(", ");
        foreach (string field in fields)
        {
            string name = field.Split(" ")[1];
            writer.WriteLine($"            {name.First().ToString().ToUpper() + name[1..]} = {name};");
        }
        
        writer.WriteLine("        }");
        
        // Fields.
        writer.WriteLine();
        foreach (string field in fields)
        {
            var type = field.Split(" ")[0];
            var name = field.Split(" ")[1];
            var property = name.First().ToString().ToUpper() + name[1..];
            writer.WriteLine($"        public {type} {property} {{ get; }}");
        }
        
        // Visitor pattern.
        writer.WriteLine();
        writer.WriteLine("        public override T Accept<T>(IVisitor<T> visitor)");
        writer.WriteLine("        {");
        writer.WriteLine($"            return visitor.Visit{className}{baseName}(this);");
        writer.WriteLine("        }");
        
        writer.WriteLine("    }");
        writer.WriteLine();
    }
}